# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[manager]
ratio = [1, 2, 3]
sort_by = "natural"
sort_sensitive = false
sort_reverse = false
sort_dir_first = true
linemode = "none"
# linemode       = "size"
show_hidden = false
show_symlink = false

[preview]
tab_size = 2
max_width = 1000
max_height = 1500
cache_dir = ""
image_filter = "triangle"
image_quality = 85
sixel_fraction = 15
ueberzug_scale = 1
ueberzug_offset = [0, 0, 0, 0]

[opener]
open = [
	{ run = 'opener.sh "$@"', block = true, desc = "Open" },
	{ run = '7z x "$1"', desc = "Extract here (7z)", for = "unix" },
	{ run = 'unrar x "$1"', desc = "Extract here (unrar)", for = "unix" },
]

[open]
rules = [
	{ name = "*/", use = ["edit", "open", "reveal"] },
	{ mime = "application/x-rar", use = ["extract"] },
	# Other archives
	{ mime = "application/*zip", use = ["extract"] },
	{ mime = "application/x-{tar,bzip*,7z-compressed,xz}", use = ["extract"] },
	{ mime = "*", use = ["open"] },
]

[tasks]
micro_workers = 10
macro_workers = 25
bizarre_retry = 5
image_alloc = 536870912  # 512MB
image_bound = [0, 0]
suppress_preload = false

[plugin]

fetchers = [
	# Mimetype
	{ id = "mime", name = "*", run = "mime", if = "!mime", prio = "high" },
]
spotters = [
	{ name = "*/", run = "folder" },
	# Code
	{ mime = "text/*", run = "code" },
	{ mime = "*/{xml,javascript,wine-extension-ini}", run = "code" },
	# Image
	{ mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# Fallback
	{ name = "*", run = "file" },
]
preloaders = [
	# Image
	{ mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
	# Font
	{ mime = "font/*", run = "font" },
	{ mime = "application/ms-opentype", run = "font" },
]
previewers = [
	{ name = "*/", run = "folder", sync = true },
	# Code
	{ mime = "text/*", run = "code" },
	{ mime = "*/{xml,javascript,wine-extension-ini}", run = "code" },
	# JSON
	{ mime = "application/{json,ndjson}", run = "json" },
	# Image
	{ mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
	# Archive
	{ mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", run = "archive" },
	{ mime = "application/{debian*-package,redhat-package-manager,rpm,android.package-archive}", run = "archive" },
	{ name = "*.{AppImage,appimage}", run = "archive" },
	# Virtual Disk / Disk Image
	{ mime = "application/{iso9660-image,qemu-disk,ms-wim,apple-diskimage}", run = "archive" },
	{ mime = "application/virtualbox-{vhd,vhdx}", run = "archive" },
	{ name = "*.{img,fat,ext,ext2,ext3,ext4,squashfs,ntfs,hfs,hfsx}", run = "archive" },
	# Font
	{ mime = "font/*", run = "font" },
	{ mime = "application/ms-opentype", run = "font" },
	# Empty file
	{ mime = "inode/empty", run = "empty" },
	# Fallback
	{ name = "*", run = "file" },
]


# preloaders = [
# 	# { name = "*", cond = "!mime", run = "mime", multi = true, prio = "high" },
# 	# Image
# 	{ mime = "image/vnd.djvu", run = "noop" },
# 	{ mime = "image/*",        run = "image" },
# 	# Video
# 	{ mime = "video/*", run = "video" },
# 	# PDF
# 	{ mime = "application/pdf", run = "pdf" },
# ]
# previewers = [
# 	{ name = "*/", run = "folder", sync = true },
# 	# Code
# 	{ mime = "text/*",                 run = "code" },
# 	{ mime = "*/xml",                  run = "code" },
# 	{ mime = "*/javascript",           run = "code" },
# 	{ mime = "*/x-wine-extension-ini", run = "code" },
# 	# JSON
# 	{ mime = "application/json", run = "json" },
# 	# Image
# 	{ mime = "image/vnd.djvu", run = "noop" },
# 	{ mime = "image/*",        run = "image" },
# 	# Video
# 	{ mime = "video/*", run = "video" },
# 	# PDF
# 	{ mime = "application/pdf", run = "pdf" },
# 	# Archive
# 	{ mime = "application/zip",             run = "archive" },
# 	{ mime = "application/gzip",            run = "archive" },
# 	{ mime = "application/x-tar",           run = "archive" },
# 	{ mime = "application/x-bzip",          run = "archive" },
# 	{ mime = "application/x-bzip2",         run = "archive" },
# 	{ mime = "application/x-7z-compressed", run = "archive" },
# 	{ mime = "application/x-rar",           run = "archive" },
# 	{ mime = "application/xz",              run = "archive" },
# 	# Fallback
# 	{ name = "*", run = "file" },
# ]


[input]
cursor_blink = false

# cd
cd_title = "Change directory:"
cd_origin = "top-center"
cd_offset = [0, 2, 50, 3]

# create
create_title = ["Create:", "Create (dir):"]
create_origin = "top-center"
create_offset = [0, 2, 50, 3]

# rename
rename_title = "Rename:"
rename_origin = "hovered"
rename_offset = [0, 1, 50, 3]

# filter
filter_title = "Filter:"
filter_origin = "top-center"
filter_offset = [0, 2, 50, 3]

# find
find_title = ["Find next:", "Find previous:"]
find_origin = "top-center"
find_offset = [0, 2, 50, 3]

# search
search_title = "Search via {n}:"
search_origin = "top-center"
search_offset = [0, 2, 50, 3]

# shell
shell_title = ["Shell:", "Shell (block):"]
shell_origin = "top-center"
shell_offset = [0, 2, 50, 3]

[confirm]
# trash
trash_title = "Trash {n} selected file{s}?"
trash_origin = "center"
trash_offset = [0, 0, 70, 20]

# delete
delete_title = "Permanently delete {n} selected file{s}?"
delete_origin = "center"
delete_offset = [0, 0, 70, 20]

# overwrite
overwrite_title = "Overwrite file?"
overwrite_content = "Will overwrite the following file:"
overwrite_origin = "center"
overwrite_offset = [0, 0, 50, 15]

# quit
quit_title = "Quit?"
quit_content = "The following task is still running, are you sure you want to quit?"
quit_origin = "center"
quit_offset = [0, 0, 50, 15]

[pick]
open_title = "Open with:"
open_origin = "hovered"
open_offset = [0, 1, 50, 7]

[which]
sort_by = "none"
sort_sensitive = false
sort_reverse = false
sort_translit = false
