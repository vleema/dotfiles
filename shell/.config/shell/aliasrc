#!/bin/bash

[ -x "$(command -v nvim)" ] && alias vimdiff="nvim -d"

# Use $XINITRC variable if file exists.
[ -f "$XINITRC" ] && alias startx="startx $XINITRC"

# sudo not required for some system commands
for command in mount umount pacman updatedb su shutdown poweroff reboot; do
  alias $command="sudo $command"
done
unset command

# Verbosity and settings that you pretty much just always are going to want.
alias \
  cp="cp -v" \
  mv="mv -v" \
  rm="rm -v" \
  bc="bc -ql" \
  mkd="mkdir -pv" \
  yt="yt-dlp --embed-metadata -i" \
  yta="yt -x -f bestaudio/best" \
  ffmpeg="ffmpeg -hide_banner" \
  c="clear"

# added on Jan 28th, 2024
alias processes="ps xf"

# added on Feb 1st, 2024
alias neofetch="fastfetch"

# added on March 31st, 2025
alias psrg="ps x | rg $1"

# Colorize commands when possible.
# ls="eza -hN --color=auto --group-directories-first" \
alias \
  ls="eza -h --color=always --group-directories-first --icons" \
  grep="grep --color=auto" \
  diff="diff --color=auto" \
  ccat="highlight --out-format=ansi" \
  ip="ip -color=auto"
alias la='eza -a --color=always --group-directories-first --icons=auto'  # all files and dirs
alias ll='eza -al --color=always --group-directories-first --icons=auto' # long format
alias lt='eza -aT --color=always --group-directories-first --icons=auto' # tree listing
# alias ld='eza -alD --color=always --icons=auto --sort newest'            # listing only folders, sorted
alias l.='eza -a | grep -E "^\."'
alias lls='eza -al --color=always --group-directories-first --icons=auto --sort newest' # long format
alias l='eza -hl --color=always --group-directories-first --icons=auto --sort newest'   # long format

# These common commands are just too long! Abbreviate them.
alias \
  ka="killall" \
  g="git" \
  sdn="shutdown -h now" \
  e="$EDITOR" \
  v="$EDITOR" \
  o="open" \
  p="pacman" \
  z="zathura" \
  Y="yazi" \
  tree="tree -C" \
  t="tmux-sessionizer.sh" \
  lg="lazygit"

# May 22th, 2022
source "${XDG_CONFIG_HOME:-$HOME/.config}"/shell/shortcutrc
# source ${XDG_CONFIG_HOME:-$HOME/.config}/shell/zshnameddirrc
# From Luke Smith video on fzf
se() { du -a $HOME/.local/bin/* | awk '{print $2}' | fzf | xargs -r $EDITOR; }
vf() { fd . | fzf --preview 'bat -n --color=always --line-range :500 {}' | xargs -r -I % $EDITOR %; }
vfh() { fd -H -I . | fzf --preview 'bat -n --color=always --line-range :500 {}' | xargs -r -I % $EDITOR %; }

# # Monitor center, May 13th, 2022
# alias smc="system-monitoring-center"

# adding flags
alias df='df -h' # human-readable sizes
# List the folders of the current directory sorted their size in Gbytes.
alias disk_usage='du -csh -- */ | sort -rh' # List the folders o

# Shows overall system information
alias sysinfo='inxi -Fxz'
#hardware info --short
alias hw="hwinfo --short"

#pacman unlock
alias unlock="doas rm /var/lib/pacman/db.lck"

#free
alias free="free -mt"

#continue download
alias wget="wget -c"

#ps
alias psgrep="ps aux | grep -v grep | grep -i -e VSZ -e"

#grub update
alias update-grub="sudo grub-mkconfig -o /boot/grub/grub.cfg"

#add new fonts
alias update-fc="sudo fc-cache -fv"

#get fastest mirrors in your neighborhood
alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
alias mirrord="sudo reflector --latest 30 --number 10 --sort delay --save /etc/pacman.d/mirrorlist"
alias mirrors="sudo reflector --latest 30 --number 10 --sort score --save /etc/pacman.d/mirrorlist"
alias mirrora="sudo reflector --latest 30 --number 10 --sort age --save /etc/pacman.d/mirrorlist"
#our experimental - best option for the moment
alias mirrorx="sudo reflector --age 6 --latest 20  --fastest 20 --threads 5 --sort rate --protocol https --save /etc/pacman.d/mirrorlist"
alias mirrorxx="sudo reflector --age 6 --latest 20  --fastest 20 --threads 20 --sort rate --protocol https --save /etc/pacman.d/mirrorlist"

#Cleanup orphaned packages
alias cleanup='sudo pacman -Rns $(pacman -Qtdq)'

#search content with ripgrep
alias rg="rg --sort path"

#get the error messages from journalctl
alias jctl="journalctl -p 3 -xb"

#systeminfo
alias probe="doas -E hw-probe -all -upload"
alias sysd_failed="systemctl list-units --failed"
alias sysd_status="systemctl list-unit-files --type=service"
# 03/dez/2024
alias sysd_user_services="systemctl --user list-units --type=service"
# List running services to file..
alias sysd_generate_serv_list="systemctl list-units --state=running | grep -v systemd | awk '{print $1}' | grep service > daemon_list_${today}.txt"

today=$(date +"%Y-%m-%d")
# List all packages.
alias pkglist_2="\pacman -Qq | awk '{print $1}' > pkglist_all_${today}.txt" # All packages.
# List explicitly installed packages that are not required by any other package.
alias pkglist_3="\pacman -Qqet | awk '{print $1}' > pkglist_explicitly_installed_not_required_by_others_${today}.txt" # Explicitly installed packages that are not required by any other package.
# List explicitly installed packages.
alias pkglist_1="\pacman -Qqe > pkglist_explicitly_installed_${today}.txt" # Explicitly installed packages.
# List explicitly installed packages w/ version number.
alias pkglist_versions="\pacman -Qe > pkglist_versions_${today}.txt"
# List packages that were not found in the sync database (AUR).
alias pkgaur="\pacman -Qqem > foreignpkglist_${today}.txt"

alias open="/usr/bin/xdg-open"

# 19/aug/2025
zf() { fd . | fzf | xargs -r -I % zathura %; }

# 16/sep/2025
alias rustbook='rustup doc --book'

# 06/out/2025
zfl() { fd -L . "$HOME"/library | fzf | xargs -r -I % zathura %; }

# 09/out/2025
of() { fd . | fzf --preview 'bat -n --color=always --line-range :500 {}' | xargs -r -I % xdg-open %; }
ofh() { fd -H -I . | fzf --preview 'bat -n --color=always --line-range :500 {}' | xargs -r -I % xdg-open %; }

# 12/out/2025
alias u='$PKG_MANAGER -Syu'
alias uf='$PKG_MANAGER -Syyu'

# 14/out/2025
alias cleansync='rclone-bisync.sh false true'

jf() { cd "$(fd -td | fzf --preview 'eza --tree --color=always {}')" || return; }
jfh() { cd "$(fd -H -I -td | fzf --preview 'eza --tree --color=always {}')" || return; }

# =======================================================================================
# HOW TO LIST THE LARGEST FILES IN A SYSTEM (source: https://www.howtouselinux.com/post/find-largest-files-and-directories-in-linux)
#
# The following commands can be used to find the largest files.
#
#     find /path/to/directory -type f -exec du -hs {} \;| sort -rh | head -n 1
#     du -sh * | sort -rh | head -1
#     ls -lSh /bin | head -1
#     find ./ -type f -exec du -sh {} \; |sort -h|tail -1
#     du -ah /home | sort -h -r | head -n 1
#     find $directory -type f -exec ls -s {} \; | sort -n | tail -n 1
# =======================================================================================

# =======================================================================================
# HOW TO CONVERT A FILE FROM ONE CHARACTER ENCODING TO ANOTHER.
# iconv -t ISO-8859-1 -f UTF-8//TRANSLIT filter.tex -o converted.tex
# -f --from-enconding		Input encoding
# -t --to-encoding			Output enconding
# -o --output 					Defines the output file.
# =======================================================================================

# =======================================================================================
# WHAT DOES " 2>&1 " MEAN?
#
# To combine stderr and stdout into the stdout stream, we append this to a command:
#
# 2>&1
#
# e.g. to see the first few errors from compiling g++ main.cpp:
#
# g++ main.cpp 2>&1 | head
#
#
# File descriptor 1 is the standard output (stdout).
# File descriptor 2 is the standard error (stderr).
#
# At first, 2>1 may look like a good way to redirect stderr to stdout. However, it will actually be interpreted as "redirect stderr to a file named 1".
#
# & indicates that what follows and precedes is a file descriptor, and not a filename. Thus, we use 2>&1. Consider >& to be a redirect merger operator.
# =======================================================================================

# =======================================================================================
# TO get key pressed codes:
# xkbcli
# =======================================================================================
